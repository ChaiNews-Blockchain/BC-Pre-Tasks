{
  "language": "Solidity",
  "sources": {
    "contracts/chainewsToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IERC20Burnable.sol\";\nimport \"./interfaces/IERC20Pausable.sol\";\nimport \"./interfaces/IOwnable.sol\";\n\ncontract ChainewsToken is IERC20, IERC20Burnable, IERC20Pausable, IOwnable {\n    /**\n     * Token name.\n     */\n    string public name = \"ChainewsToken\";\n\n    /**\n     * Token symbol.\n     */\n    string public symbol = \"CHN\";\n\n    /**\n     * Number of decimals.\n     */\n    uint8 public decimals = 18;\n\n    /**\n     * Total supply of the token.\n     */\n    uint256 private _totalSupply;\n\n    /**\n     * Token paused state.\n     */\n    bool private _paused;\n\n    /**\n     * Initial supply.\n     */\n    uint256 private constant INITIAL_SUPPLY = 1000000 * 10**18;\n\n    /**\n     * Maximum supply limit.\n     */\n    uint256 public constant MAX_SUPPLY = 2000000 * 10**18;\n\n    /**\n     * Balances of accounts.\n     */\n    mapping(address => uint256) private _balances;\n\n    /**\n     * Allowances for accounts.\n     */\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /**\n     * Contract owner.\n     */\n    address private _contractOwner;\n\n\n    /**\n     * @dev Modifier to check if the caller is the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _contractOwner, \"Not the contract owner\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check if the token is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Token is paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check if the token is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Token is not paused\");\n        _;\n    }\n\n    /**\n     * @dev Constructor that initializes the contract and mints the initial supply to the owner.\n     * @param initialOwner Address of the initial owner.\n     */\n    constructor(address initialOwner) {\n        _contractOwner = initialOwner;\n        _paused = false;\n        _mint(initialOwner, INITIAL_SUPPLY);\n        emit OwnershipTransferred(address(0), initialOwner);\n    }\n\n    // IERC20 implementation\n\n    /**\n     * @dev Returns the total supply of tokens.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the balance of a specific account.\n     * @param account Address of the account to query.\n     */\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev Transfers tokens to a specified address.\n     * @param recipient The address to transfer to.\n     * @param amount The amount to be transferred.\n     */\n    function transfer(address recipient, uint256 amount) external override whenNotPaused returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`.\n     * @param tokenOwner The address which owns the funds.\n     * @param spender The address which will spend the funds.\n     */\n    function allowance(address tokenOwner, address spender) external view override returns (uint256) {\n        return _allowances[tokenOwner][spender];\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param spender The address which will spend the funds.\n     * @param amount The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 amount) external override whenNotPaused returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfers tokens from one address to another.\n     * @param sender The address which you want to send tokens from.\n     * @param recipient The address which you want to transfer to.\n     * @param amount The amount of tokens to be transferred.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override whenNotPaused returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\n        return true;\n    }\n\n    // IERC20Burnable implementation\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param amount The amount of token to be burned.\n     */\n    function burn(uint256 amount) external override whenNotPaused {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the specified address and decrements allowance.\n     * @param account The address to burn tokens from.\n     * @param amount The amount of token to be burned.\n     */\n    function burnFrom(address account, uint256 amount) external override whenNotPaused {\n        uint256 decreasedAllowance = _allowances[account][msg.sender] - amount;\n        _approve(account, msg.sender, decreasedAllowance);\n        _burn(account, amount);\n    }\n\n    // IERC20Pausable implementation\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view override returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function pause() external override onlyOwner whenNotPaused {\n        _paused = true;\n        emit Paused(msg.sender);\n    }\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function unpause() external override onlyOwner whenPaused {\n        _paused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    // IOwnable implementation\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() external view override returns (address) {\n        return _contractOwner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * @param newOwner The address of the new owner.\n     */\n    function transferOwnership(address newOwner) external override onlyOwner {\n        require(newOwner != address(0), \"New owner is the zero address\");\n        emit OwnershipTransferred(_contractOwner, newOwner);\n        _contractOwner = newOwner;\n    }\n\n    // Public mint function\n\n    /**\n     * @dev Function to mint tokens.\n     * @param account The address that will receive the minted tokens.\n     * @param amount The amount of tokens to mint.\n     */\n    function mint(address account, uint256 amount) external onlyOwner whenNotPaused {\n        require(_totalSupply + amount <= MAX_SUPPLY, \"Minting would exceed max supply\");\n        _mint(account, amount);\n    }\n\n    // Internal functions\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     * @param sender The address to send tokens from.\n     * @param recipient The address to transfer to.\n     * @param amount The amount of tokens to be transferred.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"Transfer from the zero address\");\n        require(recipient != address(0), \"Transfer to the zero address\");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing the total supply.\n     * @param account The address that will receive the minted tokens.\n     * @param amount The amount of tokens to mint.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"Mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * @param account The address that will have the tokens burned.\n     * @param amount The amount of tokens to be burned.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"Burn from the zero address\");\n\n        _balances[account] -= amount;\n        _totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `tokenOwner`'s tokens.\n     * @param tokenOwner The owner of the tokens.\n     * @param spender The spender who will be allowed to spend the tokens.\n     * @param amount The amount of tokens to approve.\n     */\n    function _approve(address tokenOwner, address spender, uint256 amount) internal {\n        require(tokenOwner != address(0), \"Approve from the zero address\");\n        require(spender != address(0), \"Approve to the zero address\");\n\n        _allowances[tokenOwner][spender] = amount;\n        emit Approval(tokenOwner, spender, amount);\n    }\n}\n\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the total token supply.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the account balance of another account with address `account`.\n     * @param account The address from which the balance will be retrieved.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Transfers `amount` of tokens to address `recipient`, and MUST fire the Transfer event. The\n     * function SHOULD throw if the `sender` account balance does not have enough tokens to spend.\n     * @param recipient The address of the recipient.\n     * @param amount The amount of token to be transferred.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the amount which `spender` is still allowed to withdraw from `owner`.\n     * @param owner The address of the account owning tokens.\n     * @param spender The address of the account able to transfer the tokens.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Allows `spender` to withdraw from your account multiple times, up to\n     * the `amount` amount. If this function is called again it overwrites the current\n     * allowance with `amount`.\n     * @param spender The address of the account able to transfer the tokens.\n     * @param amount The amount of tokens to be approved for transfer.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Transfers `amount` of tokens from address `sender` to address `recipient`, and MUST fire the\n     * Transfer event.\n     * @param sender The address of the sender.\n     * @param recipient The address of the recipient.\n     * @param amount The amount of token to be transferred.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Triggers when tokens are transferred, including zero value transfers.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Triggers on any successful call to approve(address spender, uint256 amount).\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IERC20Burnable {\n    /**\n     * @dev Burns `amount` of tokens from the caller's account.\n     * @param amount The amount of tokens to be burned.\n     */\n    function burn(uint256 amount) external;\n\n    /**\n     * @dev Burns `amount` of tokens from `account`, deducting from the caller's allowance.\n     * @param account The address from which the tokens will be burned.\n     * @param amount The amount of tokens to be burned.\n     */\n    function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IERC20Pausable {\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() external view returns (bool);\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function pause() external;\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function unpause() external;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IOwnable {\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * @param newOwner The address of the new owner.\n     */\n    function transferOwnership(address newOwner) external;\n\n    /**\n     * @dev Emitted when ownership of the contract is transferred from `previousOwner` to `newOwner`.\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"
    },
    "contracts/repToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IERC20Burnable.sol\";\nimport \"./interfaces/IOwnable.sol\";\n\ncontract RepToken is IERC20, IERC20Burnable, IOwnable {\n\n    /**\n     * Token name.\n     */\n    string public name = \"RepToken\";\n\n    /**\n     * Token symbol.\n     */\n    string public symbol = \"REP\";\n\n    /**\n     * Number of decimals.\n     */\n    uint8 public decimals = 18;\n\n    /**\n     * Total supply of the token.\n     */\n    uint256 private _totalSupply;\n\n    /**\n     * Initial supply.\n     */\n    uint256 private constant INITIAL_SUPPLY = 1000000 * 10**18;\n\n    /**\n     * Balances of accounts.\n     */\n    mapping(address => uint256) private _balances;\n\n    /**\n     * Allowances for accounts.\n     */\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    /**\n     * Contract owner.\n     */\n    address private _contractOwner;\n\n    /**\n     * @dev Modifier to check if the caller is the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == _contractOwner, \"Not the contract owner\");\n        _;\n    }\n\n    /**\n     * @dev Constructor that initializes the contract.\n     * @param initialOwner Address of the initial owner.\n     */\n    constructor(address initialOwner) {\n        _contractOwner = initialOwner;\n        _mint(initialOwner, INITIAL_SUPPLY);  // Initial supply is 0\n        emit OwnershipTransferred(address(0), initialOwner);\n    }\n\n    // IERC20 implementation\n\n    /**\n     * @dev Returns the total supply of tokens.\n     */\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the balance of a specific account.\n     * @param account Address of the account to query.\n     */\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev Transfers tokens to a specified address.\n     * @param recipient The address to transfer to.\n     * @param amount The amount to be transferred.\n     */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`.\n     * @param tokenOwner The address which owns the funds.\n     * @param spender The address which will spend the funds.\n     */\n    function allowance(address tokenOwner, address spender) external view override returns (uint256) {\n        return _allowances[tokenOwner][spender];\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * @param spender The address which will spend the funds.\n     * @param amount The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfers tokens from one address to another.\n     * @param sender The address which you want to send tokens from.\n     * @param recipient The address which you want to transfer to.\n     * @param amount The amount of tokens to be transferred.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        require(_allowances[sender][msg.sender] >= amount, \"RepToken: transfer amount exceeds allowance\");\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\n        return true;\n    }\n\n    // IERC20Burnable implementation\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param amount The amount of token to be burned.\n     */\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the specified address and decrements allowance.\n     * @param account The address to burn tokens from.\n     * @param amount The amount of token to be burned.\n     */\n    function burnFrom(address account, uint256 amount) external override {\n        uint256 decreasedAllowance = _allowances[account][msg.sender] - amount;\n        _approve(account, msg.sender, decreasedAllowance);\n        _burn(account, amount);\n    }\n\n    // IOwnable implementation\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() external view override returns (address) {\n        return _contractOwner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * @param newOwner The address of the new owner.\n     */\n    function transferOwnership(address newOwner) external override onlyOwner {\n        require(newOwner != address(0), \"New owner is the zero address\");\n        emit OwnershipTransferred(_contractOwner, newOwner);\n        _contractOwner = newOwner;\n    }\n\n    // Public mint function\n\n    /**\n     * @dev Function to mint tokens.\n     * @param account The address that will receive the minted tokens.\n     * @param amount The amount of tokens to mint.\n     */\n    function mint(address account, uint256 amount) external onlyOwner {\n        _mint(account, amount);\n    }\n\n    // Internal functions\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     * @param sender The address to send tokens from.\n     * @param recipient The address to transfer to.\n     * @param amount The amount of tokens to be transferred.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"Transfer from the zero address\");\n        require(recipient != address(0), \"Transfer to the zero address\");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing the total supply.\n     * @param account The address that will receive the minted tokens.\n     * @param amount The amount of tokens to mint.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"Mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n     * @param account The address that will have the tokens burned.\n     * @param amount The amount of tokens to be burned.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"Burn from the zero address\");\n\n        _balances[account] -= amount;\n        _totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `tokenOwner`'s tokens.\n     * @param tokenOwner The owner of the tokens.\n     * @param spender The spender who will be allowed to spend the tokens.\n     * @param amount The amount of tokens to approve.\n     */\n    function _approve(address tokenOwner, address spender, uint256 amount) internal {\n        require(tokenOwner != address(0), \"Approve from the zero address\");\n        require(spender != address(0), \"Approve to the zero address\");\n\n        _allowances[tokenOwner][spender] = amount;\n        emit Approval(tokenOwner, spender, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}